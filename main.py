import telebot
from telebot import types
import datetime
import time
from telegram import ParseMode
import os


""" Bot token and bot instance"""

token = os.environ['TOKEN']
bot = telebot.TeleBot(token)

"""Dict with users credentials"""
users = {}




""" Main menu items (after referred as MAIN_ITEMS)"""
item_dict = {
    1: "–ó–ê–ì–°",
    2: "–î—Ä–µ—Å—Å-–∫–æ–¥",
    3: "–¶–≤–µ—Ç—ã",
    4: "–ü–æ–¥–∞—Ä–∫–∏",
    5: "–ù–∞—à —Ö—ç—à—Ç–µ–≥",
    6: "–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    7: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}

"""Dicts fot buttons in menus"""
butt_dict = {}
butt_start_dict = {}


"""Dict with codes for guests"""

codes_dict = os.environ['codes_dict']


"""Dict with urls of invitations"""
photos_url_dict = os.environ['photos_url_dict']

"""Buttons for additional menu"""
additional_dict = {
    1: "–ü—Ä–æ —Ç–æ—Å—Ç—ã",
    2: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
    3: "–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
}

"""Dicts fot buttons in menus"""
add_butt_dict = {}



"""Start command"""
@bot.message_handler(commands=['start'])
def start(message):
    users[message.chat.id] = message.chat.id
    code = bot.send_message(users[message.chat.id], '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–ª–∏')
    logger(message)
    bot.register_next_step_handler(code, get_code)


"""Check of users code"""
def get_code(message):
    code = message.text
    U = 0
    while (U == 0):
        for i in codes_dict:
            if code == codes_dict[i]:
                U = 1
                inv = open(photos_url_dict[i], 'rb')
                men = bot.send_photo(users[message.chat.id], inv)
                inv.close()
                time.sleep(2)
                logger(message)
                menu(men)
        if (U == 0):
            U = 1
            bot.send_message(users[message.chat.id], '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫ (–Ω–∞–∂–º–∏—Ç–µ -> /restart)')
            logger(message)


"""Restart of app in case of an errror in users code"""
@bot.message_handler(commands=['restart'])
def err_code(message):
    code = bot.send_message(users[message.chat.id], '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
    logger(message)
    bot.register_next_step_handler(code, get_code)


"""Main menu"""
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in item_dict:
        butt_dict[i] = types.KeyboardButton(item_dict[i])
        markup.add(butt_dict[i])
    reply = bot.send_message(users[message.chat.id], '–ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é', reply_markup=markup)
    logger(reply)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞
    bot.register_next_step_handler(reply, check_message_text)


"""Check users choice in menu"""
def check_message_text(message):
    reply = message.text
    if reply == item_dict[1]:
        reply_2 = bot.send_message(users[message.chat.id], "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –í—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –≤–æ –î–≤–æ—Ä—Ü–µ –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è?")
        logger(message)
        zags_querry(reply_2)
    elif reply == item_dict[2]:
        clothes(message)
        logger(message)
    elif reply == item_dict[3]:
        flowers(message)
        logger(message)
    elif reply == item_dict[4]:
         gift(message)
         logger(message)
    elif reply == item_dict[5]:
         hashtag(message)
         logger(message)
    elif reply == item_dict[6]:
         reply_2 = bot.send_message(users[message.chat.id], "–•–æ—Ç–∏—Ç–µ –ª–∏ –±—ã –í—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?")
         logger(message)
         invite(reply_2)
    elif reply == item_dict[7]:
         ad_info(message)
         logger(message)
    else:
        bot.send_message(users[message.chat.id], '–û–®–ò–ë–ö–ê')
        logger(message)
        menu(message)


"""Check 1 input in MAIN_ITEMS """
def zags_querry(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    markup.add(item1)
    item2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(item2)
    bot.send_message(users[message.chat.id], '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=markup)
    logger(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞ –ø–æ –∑–∞–≥—Å—É
    bot.register_next_step_handler(message, zags_answer)


""" Check answer """""
def zags_answer(message):
    reply = message.text
    if reply == "–î–∞":
        reply_2 = bot.send_message(users[message.chat.id], '–ñ–¥–µ–º –í–∞—Å –≤–æ –î–≤–æ—Ä—Ü–µ –ë—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è ‚Ññ4.\n'
                                                           '<u>–°–±–æ—Ä –≥–æ—Å—Ç–µ–π –≤ 14:40</u>', parse_mode=ParseMode.HTML)
        time.sleep(2)
        bot.send_message(users[message.chat.id], 'https://yandex.ru/maps/-/CCUJVUshkD',
                         parse_mode=ParseMode.HTML)
        time.sleep(1)
        logger(message)
    elif reply == "–ù–µ—Ç":
        reply_2 = bot.send_message(users[message.chat.id], '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —Å –Ω–∞–º–∏ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç üòî. \n–ù–æ –Ω–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å –í–∞—Å –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–º —Ñ—É—Ä—à–µ—Ç–µ –≤ <u>17:00</u>!',
                                   parse_mode=ParseMode.HTML)
        time.sleep(3)
        bot.send_message(users[message.chat.id], 'https://yandex.ru/maps/-/CCUJVUgHdB',
                         parse_mode=ParseMode.HTML)
        time.sleep(1)
        logger(message)
    else:
        bot.send_message(users[message.chat.id], '–û–®–ò–ë–ö–ê')
        logger(message)
        zags_querry(message)
    menu(reply_2)

"""2 input in MAIN_ITEMS """
def clothes(message):
    CLOTHES = open("Clothes.png", 'rb')
    bot.send_photo(users[message.chat.id], CLOTHES)
    CLOTHES.close()
    time.sleep(2)
    menu(message)


"""Check 3 input in MAIN_ITEMS"""
def flowers(message):
    bot.send_message(users[message.chat.id],
                     "–ú—ã –æ—á–µ–Ω—å –ª—é–±–∏–º —Ü–≤–µ—Ç—ã –∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫—Ä–∞—à–µ–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üå∏. "
                     "\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–¥—ã.\n\n–ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã, –µ—Å–ª–∏ –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –≥—É–±–∫–µ "
                     "—Ç–∞–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    Flower_1 = open("Flower_1.jpg", 'rb')
    Flower_2 = open("Flower_2.jpg", 'rb')
    Flower_3 = open("Flower_3.jpg", 'rb')
    time.sleep(8)
    bot.send_photo(users[message.chat.id], Flower_1, "–í –∫–æ—Ä–æ–±–∫–µ")
    time.sleep(1)
    bot.send_photo(users[message.chat.id], Flower_2, "–í –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–º —è—â–∏–∫–µ")
    time.sleep(1)
    bot.send_photo(users[message.chat.id], Flower_3, "–í –ø–ª–∞–π–º-–ø–∞–∫–µ—Ç–µ")
    Flower_1.close()
    Flower_2.close()
    Flower_3.close()
    time.sleep(1)
    menu(message)



"""Check 4 input in MAIN_ITEMS"""
def gift(message):
    bot.send_message(users[message.chat.id], "–ú—ã –Ω–µ —Ö–æ—Ç–∏–º —É—Ç—Ä—É–∂–¥–∞—Ç—å –í–∞—Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–∞—Ä–∫–∞, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º —Ä–∞–¥—ã –í–∞—à–µ–º—É –≤–∫–ª–∞–¥—É –≤ –±—é–¥–∂–µ—Ç –Ω–∞—à–µ–π –º–æ–ª–æ–¥–æ–π —Å–µ–º—å–∏ ‚ú®")
    time.sleep(3)
    bot.send_sticker(users[message.chat.id], sticker='CAACAgIAAxkBAAIEk2KnSkDQhFI_q81Ee23WXsWY4veHAAIDAQACVp29CgLl0XiH5fpPJAQ')
    time.sleep(1)
    menu(message)


"""Check 5 input in MAIN_ITEMS"""
def hashtag(message):
    bot.send_message(users[message.chat.id], "–ü—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥ #–≤–∑—Ä–æ—Å–ª—ã–π–≤–æ–ø—Ä–æ—Åüôà.\n–î–∞, –∏–º–µ–Ω–Ω–æ —Å –æ–±–µ–∑—å—è–Ω–∫–æ–π)", parse_mode=ParseMode.HTML)
    time.sleep(2)
    menu(message)


"""Check 6 input in MAIN_ITEMS"""
def invite (message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    markup.add(item1)
    item2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(item2)
    bot.send_message(users[message.chat.id], '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=markup)
    logger(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
    bot.register_next_step_handler(message, invite_answer)



"""Answer on 6 input in MAIN_ITEMS"""
def invite_answer(message):
    reply = message.text
    if reply == "–î–∞":
        reply_2 = bot.send_message(users[message.chat.id], '–ü—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ –º—ã –µ–≥–æ –í–∞–º –≤—Ä—É—á–∏–º üíå')
        time.sleep(1)
        logger(message)
    elif reply == "–ù–µ—Ç":
        reply_2 = bot.send_message(users[message.chat.id], '–†–∞–¥—ã, —á—Ç–æ –≤—ã –±–µ—Ä–µ–∂–µ—Ç–µ —ç–∫–æ–ª–æ–≥–∏—é üåé.\n'
                                                           '–ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n'
                                                           '(–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @anstsili –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∫–æ–π –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ)')
        time.sleep(3)
        logger(message)
    else:
        bot.send_message(users[message.chat.id], '–û–®–ò–ë–ö–ê')
        logger(message)
        invite(message)
    menu(reply_2)



"""Check 7 input in MAIN_ITEMS"""
""" Additional info"""
def ad_info(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in additional_dict:
        add_butt_dict[i] = types.KeyboardButton(additional_dict[i])
        markup.add(add_butt_dict[i])
    reply = bot.send_message(users[message.chat.id], '–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—É–Ω–∫—Ç', reply_markup=markup)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞
    bot.register_next_step_handler(reply, check_ad_info)


"""Check additional info dict choice"""
def check_ad_info(message):
    reply = message.text
    if reply == additional_dict[1]:
        bot.send_message(users[message.chat.id], "https://www.psychologies.ru/wellbeing/pozdravlenie-na-svadbe-chto-i-kak-govorit-molodozhenam")
        time.sleep(1.5)
        bot.send_message(users[message.chat.id], "ü•Ç")
        time.sleep(1.5)
        logger(message)
        ad_info(message)
    elif reply == additional_dict[2]:
        bot.send_message(users[message.chat.id], "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @anstsili ü§ó.\n\n–í —Ç–æ–º —á–∏—Å–ª–µ –∑–∞ –ø–æ–º–æ—â—å—é –≤ –≤—ã–±–æ—Ä–µ –Ω–∞—Ä—è–¥–æ–≤ –Ω–∞—à–µ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã "
                                                 "üëó(—É–∂–µ –Ω–∞—à–ª–∞ –¥–µ—Å—è—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤)")
        time.sleep(1.5)
        logger(message)
        ad_info(message)
    else:
        logger(message)
        menu(message)

"""Message logging"""
def logger(message):
    dtn = datetime.datetime.now()
    botlogfile = open('TestBot.log', 'a')
    print(dtn.strftime("%d-%m-%Y %H:%M"), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + message.from_user.first_name, message.from_user.id,
          '–Ω–∞–ø–∏—Å–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ: ' + str(message.text), file=botlogfile)
    botlogfile.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except:
        continue





